plugins {
    id("org.springframework.boot")
    id("java")
    id("com.github.johnrengelman.processes") version "0.5.0"
    id("org.springdoc.openapi-gradle-plugin") version "1.3.0"
    id("com.google.cloud.tools.jib")
}

group = "eu._5gzorro"
sourceCompatibility = "1.8"

configurations {
    // corda logging (log4j) clashes with spring so just exclude the starter as quick fix
    compile.exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
    implementation.exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
    runtime.exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
}



dependencies {
    implementation("org.hibernate.validator:hibernate-validator:6.0.13.Final")

    implementation("org.springframework.boot:spring-boot-starter-websocket:$spring_boot_version")

    implementation("org.springframework.boot:spring-boot-starter-test:$spring_boot_version") {
        exclude group: "junit", module: "junit"
    }

    implementation('org.springframework.kafka:spring-kafka:2.4.12.RELEASE')

    implementation('org.springdoc:springdoc-openapi-ui:1.3.9')

    testImplementation("org.awaitility:awaitility:$awaitility_version")

    implementation(project(":dlt-driver-api"))
    compile(project(":corda-driver:driver-impl"))

    testImplementation("org.junit.jupiter:junit-jupiter-api:$junit5_version")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:$junit5_version")

    implementation("io.reactivex.rxjava3:rxjava:$rxjava3_version")

    implementation(project(":tm-forum"))

    implementation("org.springframework.boot:spring-boot-starter-data-jpa:$spring_boot_version")
    compile("org.springframework.boot:spring-boot-starter-jdbc:$spring_boot_version")

    implementation("org.postgresql:postgresql:$postgresql_version")
    implementation("com.vladmihalcea:hibernate-types-52:$hibernate_types_52_version")

    implementation("org.springframework.boot:spring-boot-starter-actuator:$spring_boot_version")

    implementation("org.springframework.cloud:spring-cloud-starter-openfeign:$spring_cloud_open_feign_version")
    implementation("io.github.openfeign:feign-okhttp:$open_feign_version")
    implementation("io.github.openfeign:feign-httpclient:$open_feign_version")
    implementation("org.springframework.boot:spring-boot-starter-validation:$spring_boot_version")

}

springBoot {
    mainClassName = "eu._5gzorro.manager.api.ManagerApplication"
}

openApi {
    outputDir = file("$projectDir/../docs/swagger-ui/")
    outputFileName = "openapi.yaml"
    waitTimeInSeconds = 60
    apiDocsUrl = "http://localhost:8087/api-docs"
    forkProperties = "-Dspring.profiles.active=openapi-generate"
}

jib {
    to {
        image = "docker.pkg.github.com/mike-no/smart-contract-lifecycle-manager/lifecycle-manager-api:${version}"
    }
    container {
        mainClass = 'eu._5gzorro.manager.api.ManagerApplication'
    }
}

task bootRunDev(type: org.springframework.boot.gradle.tasks.run.BootRun, dependsOn: 'build') {
    group = 'Application'

    doFirst() {
        main = bootJar.mainClassName
        classpath = sourceSets.main.runtimeClasspath
        systemProperty 'spring.profiles.active', 'dev'
    }
}