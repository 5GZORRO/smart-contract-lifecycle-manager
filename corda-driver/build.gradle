
allprojects {

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-parameters" // Required by Corda's serialisation framework.
    }

    jar {
        // This makes the JAR's SHA-256 hash repeatable.
        preserveFileTimestamps = false
        reproducibleFileOrder = true
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }
}

apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'

sourceSets {
    main {
        resources {
            srcDir rootProject.file("config/dev")
        }
    }
}

dependencies {
    // Corda dependencies.
    cordaCompile "$corda_core_release_group:corda-core:$corda_core_release_version"
    cordaCompile "$corda_release_group:corda-node-api:$corda_release_version"
    cordaRuntime "$corda_release_group:corda:$corda_release_version"

    cordaCompile "$corda_release_group:corda-jackson:$corda_release_version"

    // CorDapp dependencies.
    cordapp project(":corda-driver:workflows")
    cordapp project(":corda-driver:contracts")
    cordapp project(":corda-driver:did-oracle")

    cordaCompile "org.apache.logging.log4j:log4j-slf4j-impl:${log4j_version}"
    cordaCompile "org.apache.logging.log4j:log4j-web:${log4j_version}"
    cordaCompile "org.slf4j:jul-to-slf4j:$slf4j_version"
}

task ganache {
    subprojects {
        if (it.project.name != "clients") {
            dependsOn jar
            doLast {
                copy {
                    from "${buildDir}/libs"
                    into "${rootDir}/build/libs"
                }
            }
        }
    }
}

task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {
    nodeDefaults {
        projectCordapp {
            deploy = false
        }
        cordapp project(':corda-driver:workflows')
    }
    node {
        name "O=Notary,L=London,C=GB"
        notary = [validating : false]
        p2pPort 10002
        rpcSettings {
            address("localhost:10003")
            adminAddress("localhost:10043")
        }
        cordapp(project(':corda-driver:contracts'))
    }
    node {
        name "O=Company1,L=New York,C=US"
        p2pPort 10005
        rpcSettings {
            address("localhost:10006")
            adminAddress("localhost:10046")
        }
        cordapp(project(':corda-driver:contracts')) {
            config '''
                apiUrl=localhost:8087
            '''
        }
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=Company2,L=Madrid,C=ES"
        p2pPort 10008
        rpcSettings {
            address("localhost:10009")
            adminAddress("localhost:10049")
        }
        cordapp(project(':corda-driver:contracts')) {
            config '''
                apiUrl=localhost:8086
            '''
        }
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=GovernanceNode,L=Madrid,C=ES"
        p2pPort 10011
        rpcSettings {
            address("localhost:10012")
            adminAddress("localhost:10052")
        }
        cordapp(project(':corda-driver:contracts')) {
            config '''
                apiUrl=localhost:8089
            '''
        }
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
//    node {
//        name "O=Oracle,L=London,C=GB"
//        p2pPort 10020
//        rpcSettings {
//            address("localhost:10021")
//            adminAddress("localhost:10061")
//        }
//        cordapp(project(':corda-driver:did-oracle'))
//        cordapp(project(':corda-driver:contracts')) {
//            config '''
//                apiUrl=localhost:8082
//            '''
//        }
//        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
//    }
}

task installQuasar(type: Copy) {
    destinationDir rootProject.file("lib")
    from(configurations.quasar) {
        rename 'quasar-core(.*).jar', 'quasar.jar'
    }
}


